-- MySQL Script generated by MySQL Workbench
-- Tue May  9 22:59:02 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema leadersacademy
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema leadersacademy
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `leadersacademy` DEFAULT CHARACTER SET latin1 ;
USE `leadersacademy` ;

-- -----------------------------------------------------
-- Table `leadersacademy`.`JoiningType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`JoiningType` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`JoiningType` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `leadersacademy`.`Location`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`Location` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`Location` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL DEFAULT NULL,
  `Address` VARCHAR(300) NULL DEFAULT NULL,
  `Contact` VARCHAR(20) NULL DEFAULT NULL,
  `GeoCoordinates` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `leadersacademy`.`Nirvana`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`Nirvana` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`Nirvana` (
  `Id` INT(11) NOT NULL,
  `CreatedDate` DATETIME NOT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `leadersacademy`.`NirvanaDates`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`NirvanaDates` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`NirvanaDates` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `NirvanaId` INT(11) NULL DEFAULT NULL,
  `Day` DATETIME NULL DEFAULT NULL,
  `StartTime` VARCHAR(5) NULL DEFAULT NULL,
  `EndTime` VARCHAR(5) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`),
  CONSTRAINT `NirvanaDates_Nirvana`
    FOREIGN KEY (`NirvanaId`)
    REFERENCES `leadersacademy`.`Nirvana` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = latin1;

CREATE INDEX `NirvanaDates_Nirvana_idx` ON `leadersacademy`.`NirvanaDates` (`NirvanaId` ASC);


-- -----------------------------------------------------
-- Table `leadersacademy`.`Notification`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`Notification` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`Notification` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Title` TEXT NULL DEFAULT NULL,
  `Message` TEXT NULL DEFAULT NULL,
  `MessageTo` VARCHAR(45) NULL DEFAULT NULL,
  `EventType` VARCHAR(45) NULL DEFAULT NULL,
  `Batch` VARCHAR(45) NULL DEFAULT NULL,
  `Role` VARCHAR(45) NULL DEFAULT NULL,
  `Type` VARCHAR(45) NULL DEFAULT NULL,
  `StartDate` DATETIME NULL DEFAULT NULL,
  `EndDate` DATETIME NULL DEFAULT NULL,
  `CreatedDate` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `leadersacademy`.`Role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`Role` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`Role` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `leadersacademy`.`Team`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`Team` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`Team` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL DEFAULT NULL,
  `Contact` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 9
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `leadersacademy`.`Users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`Users` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`Users` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `UserName` VARCHAR(30) CHARACTER SET 'utf8' NULL DEFAULT NULL,
  `Password` VARCHAR(30) CHARACTER SET 'utf8' NULL DEFAULT NULL,
  `FirstName` VARCHAR(45) NULL DEFAULT NULL,
  `LastName` VARCHAR(45) NULL DEFAULT NULL,
  `RoleId` INT(11) NULL DEFAULT NULL,
  `Contact` VARCHAR(12) NULL DEFAULT NULL,
  `DOB` DATETIME NULL DEFAULT NULL,
  `Profession` VARCHAR(20) NULL DEFAULT NULL,
  `TeamId` INT(11) NULL DEFAULT NULL,
  `JoiningTypeId` INT(11) NULL DEFAULT NULL,
  `JoinedBy` VARCHAR(45) NULL DEFAULT NULL,
  `Pin` VARCHAR(4) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`),
  CONSTRAINT `FK_User_JoiningType`
    FOREIGN KEY (`JoiningTypeId`)
    REFERENCES `leadersacademy`.`JoiningType` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_User_Role`
    FOREIGN KEY (`RoleId`)
    REFERENCES `leadersacademy`.`Role` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FN_User_Team`
    FOREIGN KEY (`TeamId`)
    REFERENCES `leadersacademy`.`Team` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 21
DEFAULT CHARACTER SET = latin1;

CREATE UNIQUE INDEX `UserName_UNIQUE` ON `leadersacademy`.`Users` (`UserName` ASC);

CREATE INDEX `FK_User_Role_idx` ON `leadersacademy`.`Users` (`RoleId` ASC);

CREATE INDEX `FN_User_Team_idx` ON `leadersacademy`.`Users` (`TeamId` ASC);

CREATE INDEX `FK_User_JoiningType_idx` ON `leadersacademy`.`Users` (`JoiningTypeId` ASC);


-- -----------------------------------------------------
-- Table `leadersacademy`.`Workshop`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`Workshop` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`Workshop` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `LocationId` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`),
  CONSTRAINT `Workshop_Location`
    FOREIGN KEY (`LocationId`)
    REFERENCES `leadersacademy`.`Location` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = latin1;

CREATE INDEX `Workshop_Location_idx` ON `leadersacademy`.`Workshop` (`LocationId` ASC);


-- -----------------------------------------------------
-- Table `leadersacademy`.`UserWorkshop`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`UserWorkshop` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`UserWorkshop` (
  `UserId` INT(11) NULL DEFAULT NULL,
  `WorkshopId` INT(11) NULL DEFAULT NULL,
  `AdmissionCardNo` VARCHAR(10) NULL DEFAULT NULL,
  CONSTRAINT `FK_UW_User`
    FOREIGN KEY (`UserId`)
    REFERENCES `leadersacademy`.`Users` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_UW_Workshop`
    FOREIGN KEY (`WorkshopId`)
    REFERENCES `leadersacademy`.`Workshop` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1;

CREATE INDEX `FK_UW_User_idx` ON `leadersacademy`.`UserWorkshop` (`UserId` ASC);

CREATE INDEX `FK_UW_Workshop_idx` ON `leadersacademy`.`UserWorkshop` (`WorkshopId` ASC);


-- -----------------------------------------------------
-- Table `leadersacademy`.`WorkshopDates`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `leadersacademy`.`WorkshopDates` ;

CREATE TABLE IF NOT EXISTS `leadersacademy`.`WorkshopDates` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `WorkshopId` INT(11) NULL DEFAULT NULL,
  `Day` DATETIME NULL DEFAULT NULL,
  `StartTime` VARCHAR(5) NULL DEFAULT NULL,
  `EndTime` VARCHAR(5) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`),
  CONSTRAINT `WorkshopDates_Workshop`
    FOREIGN KEY (`WorkshopId`)
    REFERENCES `leadersacademy`.`Workshop` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 41
DEFAULT CHARACTER SET = latin1;

CREATE INDEX `WorkshopDates_Workshop_idx` ON `leadersacademy`.`WorkshopDates` (`WorkshopId` ASC);

USE `leadersacademy` ;

-- -----------------------------------------------------
-- procedure AddModifyUser
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`AddModifyUser`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `AddModifyUser`(IN UserId INT, In UserName varchar(50), IN Password varchar(50),
								 IN FirstName VARCHAR(50), IN LastName VARCHAR(50), IN RoleId INT, IN Contact VARCHAR(20),
                                 IN DOB VARCHAR(20), IN Profession VARCHAR(50), IN TeamId INT, IN JoiningType INT, 
                                 IN JoinedBy VARCHAR(50), IN WorkshopDetails VARCHAR(200))
BEGIN
	DECLARE user INT;
    DECLARE substr vARCHAR(100);
    DECLARE admissionCardNo VARCHAR(50);
    DECLARE workshopId INT;

	IF(UserId = -1) THEN
		INSERT INTO Users (UserName, Password, FirstName, LastName, RoleId, Contact, DOB, Profession, TeamId, JoiningTypeId, JoinedBy)
        SELECT UserName, Password, FirstName, LastName, RoleId, Contact, STR_TO_DATE(DOB, '%d-%m-%Y'), Profession, TeamId, JoiningType, JoinedBy;
        
        SET user = LAST_INSERT_ID();
    ELSE
		SET user = UserId;
		UPDATE Users
           SET UserName = UserName
             , Password = Password
             , FirstName = FirstName
             , LastName = LastName
             , RoleId = RoleId
             , Contact = Contact
             , DOB = STR_TO_DATE(DoB, '%d-%m-%Y')
             , Profession = Profession
             , TeamId = TeamId
             , JoiningTypeId = JoiningType
             , JoinedBy = JoinedBy
		 WHERE Id = UserId;
	 END if;
    
    DELETE FROM UserWorkshop WHERE UserWorkshop.UserId = user;
    
	WHILE (length(WorkshopDetails) > 0) do
		IF(INSTR(WorkshopDetails, '-') -1 > 0) THEN
			set substr = substring(WorkshopDetails, 1, INSTR(WorkshopDetails, '-') -1 );
			set WorkshopDetails = substring(WorkshopDetails, INSTR(WorkshopDetails, '-')+1, length(WorkshopDetails));
		ELSE 
			set substr = WorkshopDetails;
			set WorkshopDetails = '';
		END IF;
        
        SET workshopId = substring(substr, 1, INSTR(substr, '$')-1);
        SET admissionCardNo = substring(substr, INSTR(substr, '$') + 1);
                
        INSERT INTO UserWorkshop
        VALUES (user, workshopId, admissionCardNo);
        
	END WHILE;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AuthenticateUser
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`AuthenticateUser`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `AuthenticateUser`(IN ContactNumber VARCHAR(50), IN PinNumber VARCHAR(4))
BEGIN

	DECLARE userPin VARCHAR(4) DEFAULT '';
    
	IF(SELECT COUNT(*) = 0 FROM Users WHERE Contact = ContactNumber) THEN
		INSERT INTO Users(Contact, Pin) VALUES(ContactNumber, PinNumber);
    ELSEIF(SELECT COALESCE(Pin, '') = '' FROM Users WHERE Contact = ContactNumber) THEN
		UPDATE Users SET Pin = PinNumber WHERE Contact = ContactNumber;
     END IF;
     
	SELECT Users.Id, Users.FirstName, Users.LastName, Role.Name AS RoleName 
	  FROM Users 
	  LEFT JOIN Role ON Users.RoleId = Role.Id 
	 WHERE Contact = ContactNumber
	   AND Pin = PinNumber;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CreateNirvana
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`CreateNirvana`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `CreateNirvana`()
BEGIN
	INSERT INTO Nirvana(CreatedDate)
    SELECT NOW();
    
    SELECT LAST_INSERT_ID();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CreateNirvanaDates
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`CreateNirvanaDates`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `CreateNirvanaDates`(IN NirvanaId INT,
IN NirvanaDay VARCHAR(200), IN StartTime VARCHAR(5), IN EndTime VARCHAR(5))
BEGIN
	INSERT INTO NirvanaDates(NirvanaId, Day, StartTime, EndTime)
    VALUES (NirvanaId, STR_TO_DATE(NirvanaDay, '%d-%m-%Y'), StartTime, EndTime);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CreateWorkShopDates
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`CreateWorkShopDates`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `CreateWorkShopDates`(IN WorkshopId INT,
IN WorkshopDay VARCHAR(200), IN StartTime VARCHAR(5), IN EndTime VARCHAR(5))
BEGIN
	INSERT INTO WorkshopDates(WorkshopId, Day, StartTime, EndTime)
    VALUES (WorkshopId, STR_TO_DATE(WorkshopDay, '%d-%m-%Y'), StartTime, EndTime);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CreateWorkshop
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`CreateWorkshop`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `CreateWorkshop`(IN LocationId INT)
BEGIN
	INSERT INTO Workshop(LocationId) VALUES(LocationId);
    SELECT LAST_INSERT_ID();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetEvents
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`GetEvents`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `GetEvents`()
BEGIN
	SELECT w.Id, 'Workshop' EventType, l.Name, l.Address, l.GeoCoordinates, wd.Day
      FROM Workshop w
      JOIN Location l ON w.LocationId = l.Id
      JOIN WorkshopDates wd ON wd.WorkshopId = w.Id
	 WHERE wd.Id IN (SELECT Id FROM (
						SELECT Id, MIN(Day) Day FROM WorkshopDates GROUP BY Id
				   )a WHERE Day > CURDATE())
    UNION ALL
    SELECT n.Id, 'Nirvana' EventType, 'Unknown' Name, '' Address, '' GeoCoordinates, nd.Day
      FROM Nirvana n
      JOIN NirvanaDates nd ON nd.NirvanaId = n.Id
	 WHERE nd.Id IN (SELECT Id FROM (
						SELECT Id, MIN(Day) Day FROM NirvanaDates GROUP BY Id
				   )a WHERE Day > CURDATE())
    
      ORDER BY Day ASC; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetNirvana
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`GetNirvana`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `GetNirvana`()
BEGIN
	SELECT w.Id, wd.Day
      FROM Nirvana w
      JOIN NirvanaDates wd ON wd.NirvanaId = w.Id
      ORDER BY Day DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetNotifications
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`GetNotifications`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `GetNotifications`(IN UserId INT, In NotificationId INT)
BEGIN

	DECLARE roleName VARCHAR(50) DEFAULT '';
    
    SELECT r.Name INTO roleName 
      FROM Users u
      JOIN Role r ON u.RoleId = r.Id
	 WHERE u.Id = UserId;

	SELECT Id, Title, Message
	  FROM Notification
	 WHERE (NotificationId IS NULL OR Id > NotificationId)
	   AND (MessageTo = 'Everyone'
        OR (MessageTo = 'CTM' AND roleName = 'CTM Member')
        OR (MessageTo = 'Participant' AND roleName = 'Participant')
        OR (MessageTo = 'GLT' AND roleName = 'Group Leader Trainee')
        OR (MessageTo = 'CTM' AND roleName = 'CTM Member')
        OR roleName = 'Group Leader Trainer'
        OR roleName = 'Admin')
       AND EndDate >= CURDATE();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetWorkshop
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`GetWorkshop`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `GetWorkshop`()
BEGIN
	SELECT w.Id, l.Name, wd.Day
      FROM Workshop w
      JOIN Location l ON w.LocationId = l.Id
      JOIN WorkshopDates wd ON wd.WorkshopId = w.Id
      ORDER BY Day DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure new_procedure
-- -----------------------------------------------------

USE `leadersacademy`;
DROP procedure IF EXISTS `leadersacademy`.`new_procedure`;

DELIMITER $$
USE `leadersacademy`$$
CREATE DEFINER=`awsdbpb`@`%` PROCEDURE `new_procedure`()
BEGIN
DECLARE str VARCHAR(200);
declare substr varchar(100);
set str = 'ab-ber-cad';
WHILE (length(str) > 0) do
	IF(INSTR(str, '-') -1 > 0) THEN
		set substr = substring(str, 1, INSTR(str, '-') -1 );
        set str = substring(str, INSTR(str, '-')+1, length(str));
	ELSE 
		set substr = str;
        set str = '';
    END IF;
    
    select substr, length(str);
END WHILE;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
